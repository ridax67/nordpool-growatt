# Nordpool charts
- triggers:                                                                                                                                                                                                                                                                                                                   
    - trigger: time_pattern
      minutes: /10
    - trigger: homeassistant
      event: start
  actions:
    - action: nordpool.get_prices_for_date
      data:
        config_entry: 01K83SXQ68W3952XYRE2YE6JA3
        date: "{{ now().date() }}"
        areas: SE3
        currency: SEK
      response_variable: today_price
    - action: nordpool.get_prices_for_date
      data:
        config_entry: 01K83SXQ68W3952XYRE2YE6JA3
        date: "{{ now().date() + timedelta(days=1) }}"
        areas: SE3
        currency: SEK
      response_variable: tomorrow_price
  sensor:
    - name: Electricity prices
      unique_id: se3_electricity_prices
      unit_of_measurement: "SEK/kWh"
      icon: mdi:cash
      state: >
        {% if (today_price is mapping) and (tomorrow_price is mapping) %}
          {% set data = namespace(prices=[]) %}
          {% set electricity_tax = states('input_number.electricity_tax') | float(0) %}
          {% set purchase_costs = states('input_number.electricity_purchase_costs') | float(0) %}
          {% for state in today_price['SE3'] %}
            {% set data.prices = data.prices + [((state.price/1000 + electricity_tax + purchase_costs) * 1.0) | round(3, default=0)] %}
          {% endfor %}
          {% for state in tomorrow_price['SE3'] %}
            {% set data.prices = data.prices + [((state.price/1000 + electricity_tax + purchase_costs) * 1.0) | round(3, default=0)] %}
          {% endfor %}
          {{min(data.prices)}}
        {% else %}
          unavailable
        {% endif %}
      attributes:
        data: >
          {% if (today_price is mapping) and (tomorrow_price is mapping) %}
          {% set electricity_tax = states('input_number.electricity_tax') | float(0) %}
          {% set purchase_costs = states('input_number.electricity_purchase_costs') | float(0) %}
          {% set data = namespace(prices=[]) %}
            {% for state in today_price['SE3'] %}
              {% set corrected_start = as_datetime(state.start).astimezone().strftime('%Y-%m-%d %H:%M:%S') %}
              {% set corrected_end = as_datetime(state.end).astimezone().strftime('%Y-%m-%d %H:%M:%S') %}
              {% set data.prices = data.prices + [{'start':corrected_start, 'end':corrected_end, 'price': ((state.price/1000 + electricity_tax + purchase_costs) * 1.0) | round(3, default=0)}] %}
            {% endfor %}
            {% for state in tomorrow_price['SE3'] %}
              {% set corrected_start = as_datetime(state.start).astimezone().strftime('%Y-%m-%d %H:%M:%S') %}
              {% set corrected_end = as_datetime(state.end).astimezone().strftime('%Y-%m-%d %H:%M:%S') %}
              {% set data.prices = data.prices + [{'start':corrected_start, 'end':corrected_end, 'price': ((state.price/1000 + electricity_tax + purchase_costs) * 1.0) | round(3, default=0)}] %}
            {% endfor %}
            {{data.prices}}
          {% else %}
            []
          {% endif %}
